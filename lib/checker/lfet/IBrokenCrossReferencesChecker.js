// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.3.0 (240629a), https://www.lohrfink.de/lfet
// From decision table
// "../htmlSanityCheck.js/lfet/checker/BrokenCrossReferencesChecker.lfet"
// 16.08.2024 16:31
//

// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.ini not found
// used LF-ET 2.3.0 (240629a) build in default

class IBrokenCrossReferencesChecker {
  // Prolog Standard <----

  /**
   * <b>B01: href contains invalid chars</b><br>
   * <br>
   * The enum generation has been triggered in project.ini by:<br>
   * - <b>IDE.JavaScript.InterfaceEnum.40</b>: IncludeTagsTitle=href contains invalid chars, href starts with, href equal; Symbol; Title<br>
   * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
   */
  isHrefContainsInvalidChars (/* HrefContainsInvalidChars */ arg, model) {
  }

  /**
   * <b>B02: href starts with</b><br>
   * <br>
   * The enum generation has been triggered in project.ini by:<br>
   * - <b>IDE.JavaScript.InterfaceEnum.40</b>: IncludeTagsTitle=href contains invalid chars, href starts with, href equal; Symbol; Title<br>
   * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
   */
  isHrefStartsWith (/* HrefStartsWith */ arg, model) {
  }

  /**
   * <b>B03: href equal</b><br>
   * <br>
   * The enum generation has been triggered in project.ini by:<br>
   * - <b>IDE.JavaScript.InterfaceEnum.40</b>: IncludeTagsTitle=href contains invalid chars, href starts with, href equal; Symbol; Title<br>
   * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
   */
  isHrefEqual (/* HrefEqual */ arg, model) {
  }

  /**
   * <b>B04: exists link target</b><br>
   * <br>
   * <b>B04/01: Y - Yes</b>
   */
  isExistsLinkTarget (model) {
  }

  /**
   * <b>B05: count reference occurrences</b><br>
   * <br>
   * The enum generation has been triggered in project.ini by:<br>
   * - <b>IDE.JavaScript.InterfaceEnum.30</b>: IncludeTagsTitle=count reference occurrences; Symbol=Interval; Title<br>
   * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
   */
  isCountReferenceOccurrences (/* CountReferenceOccurrences */ arg, model) {
  }

  /**
   * <b>A01: create finding</b><br>
   * <br>
   * The enum generation has been triggered in project.ini by:<br>
   * - <b>IDE.JavaScript.InterfaceEnum.20</b>: IncludeTagsTitle=create finding; Symbol; Title<br>
   * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
   */
  doCreateFinding (/* CreateFinding */ arg, model) {
  }

  /**
   * <b>A02: inc number of checks</b><br>
   * <br>
   * The enum generation has been triggered in project.ini by:<br>
   * - <b>IDE.JavaScript.InterfaceEnum.10</b>: IncludeTagsTitle=inc number of checks; Symbol=Integer<br>
   * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
   */
  doIncNumberOfChecks (/* IncNumberOfChecks */ arg, model) {
  }
}

/**
 * <b>B01: href contains invalid chars</b><br>
 * <br>
 * The enum generation has been triggered in project.ini by:<br>
 * - <b>IDE.JavaScript.InterfaceEnum.40</b>: IncludeTagsTitle=href contains invalid chars, href starts with, href equal; Symbol; Title<br>
 * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
 */
class HrefContainsInvalidChars {
  #symbol
  #title

  constructor (symbol, title) {
    this.#symbol = symbol
    this.#title = title
  }

  getSymbol () {
    return this.#symbol
  }

  getTitle () {
    return this.#title
  }
}

/**
 * <b>B02: href starts with</b><br>
 * <br>
 * The enum generation has been triggered in project.ini by:<br>
 * - <b>IDE.JavaScript.InterfaceEnum.40</b>: IncludeTagsTitle=href contains invalid chars, href starts with, href equal; Symbol; Title<br>
 * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
 */
class HrefStartsWith {
  #symbol
  #title

  constructor (symbol, title) {
    this.#symbol = symbol
    this.#title = title
  }

  getSymbol () {
    return this.#symbol
  }

  getTitle () {
    return this.#title
  }
}

/**
 * <b>B03: href equal</b><br>
 * <br>
 * The enum generation has been triggered in project.ini by:<br>
 * - <b>IDE.JavaScript.InterfaceEnum.40</b>: IncludeTagsTitle=href contains invalid chars, href starts with, href equal; Symbol; Title<br>
 * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
 */
class HrefEqual {
  #symbol
  #title

  constructor (symbol, title) {
    this.#symbol = symbol
    this.#title = title
  }

  getSymbol () {
    return this.#symbol
  }

  getTitle () {
    return this.#title
  }
}

/**
 * <b>B05: count reference occurrences</b><br>
 * <br>
 * The enum generation has been triggered in project.ini by:<br>
 * - <b>IDE.JavaScript.InterfaceEnum.30</b>: IncludeTagsTitle=count reference occurrences; Symbol=Interval; Title<br>
 * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
 */
class CountReferenceOccurrences {
  #symbol
  #symbolMin
  #symbolMax
  #title

  constructor (symbol, symbolMin, symbolMax, title) {
    this.#symbol = symbol
    this.#symbolMin = symbolMin
    this.#symbolMax = symbolMax
    this.#title = title
  }

  getSymbol () {
    return this.#symbol
  }

  getSymbolMin () {
    return this.#symbolMin
  }

  getSymbolMax () {
    return this.#symbolMax
  }

  isInSymbolInterval (arg) {
    return this.#symbolMin <= arg && arg <= this.#symbolMax
  }

  getTitle () {
    return this.#title
  }
}

/**
 * <b>A01: create finding</b><br>
 * <br>
 * The enum generation has been triggered in project.ini by:<br>
 * - <b>IDE.JavaScript.InterfaceEnum.20</b>: IncludeTagsTitle=create finding; Symbol; Title<br>
 * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
 */
class CreateFinding {
  #symbol
  #title

  constructor (symbol, title) {
    this.#symbol = symbol
    this.#title = title
  }

  getSymbol () {
    return this.#symbol
  }

  getTitle () {
    return this.#title
  }
}

/**
 * <b>A02: inc number of checks</b><br>
 * <br>
 * The enum generation has been triggered in project.ini by:<br>
 * - <b>IDE.JavaScript.InterfaceEnum.10</b>: IncludeTagsTitle=inc number of checks; Symbol=Integer<br>
 * - <b>ide.JavaScript.InterfaceEnum.default</b>: MethodName=Prefix; EnumValueName=UpperCase
 */
class IncNumberOfChecks {
  #symbol
  #symbolInt

  constructor (symbol, symbolInt) {
    this.#symbol = symbol
    this.#symbolInt = symbolInt
  }

  getSymbol () {
    return this.#symbol
  }

  getSymbolInteger () {
    return this.#symbolInt
  }
}

// Epilog Standard ---->
// profile LFET.Java.Epilog.Standard.Interface.ini not found
// used LF-ET 2.3.0 (240629a) build in default

/**
 * <b>B01: href contains invalid chars</b><br>
 * <br>
 * <b>B01/01: \* - Star character</b>
 */
const HREF_CONTAINS_INVALID_CHARS_001 = new HrefContainsInvalidChars('\\*', 'Star character')

/**
 * <b>B01: href contains invalid chars</b><br>
 * <br>
 * <b>B01/02: \$ - Dollar character</b>
 */
const HREF_CONTAINS_INVALID_CHARS_002 = new HrefContainsInvalidChars('\\$', 'Dollar character')

/**
 * <b>B01: href contains invalid chars</b><br>
 * <br>
 * <b>B01/03: \s - Whitespace</b>
 */
const HREF_CONTAINS_INVALID_CHARS_003 = new HrefContainsInvalidChars('\\s', 'Whitespace')

const HREF_CONTAINS_INVALID_CHARS = [
  HREF_CONTAINS_INVALID_CHARS_001,
  HREF_CONTAINS_INVALID_CHARS_002,
  HREF_CONTAINS_INVALID_CHARS_003
]

/**
 * <b>B02: href starts with</b><br>
 * <br>
 * <b>B02/01: # - href starts with a #</b>
 */
const HREF_STARTS_WITH_001 = new HrefStartsWith('#', 'href starts with a #')

const HREF_STARTS_WITH = [
  HREF_STARTS_WITH_001
]

/**
 * <b>B03: href equal</b><br>
 * <br>
 * <b>B03/01: # - href starts with a #</b>
 */
const HREF_EQUAL_001 = new HrefEqual('#', 'href starts with a #')

const HREF_EQUAL = [
  HREF_EQUAL_001
]

/**
 * <b>B05: count reference occurrences</b><br>
 * <br>
 * <b>B05/01: >1 - more than once referenced</b>
 */
const COUNT_REFERENCE_OCCURRENCES_001 = new CountReferenceOccurrences('>1', 2, Number.POSITIVE_INFINITY, 'more than once referenced')

const COUNT_REFERENCE_OCCURRENCES = [
  COUNT_REFERENCE_OCCURRENCES_001
]

/**
 * <b>A01: create finding</b><br>
 * <br>
 * <b>A01/01: ILC - link "$href" contains illegal characters</b>
 */
const CREATE_FINDING_001 = new CreateFinding('ILC', 'link "$href" contains illegal characters')

/**
 * <b>A01: create finding</b><br>
 * <br>
 * <b>A01/02: ILCRC - link "$href" contains illegal characters, reference count: $refCount</b>
 */
const CREATE_FINDING_002 = new CreateFinding('ILCRC', 'link "$href" contains illegal characters, reference count: $refCount')

/**
 * <b>A01: create finding</b><br>
 * <br>
 * <b>A01/03: BLT - link target "$href" missing</b>
 */
const CREATE_FINDING_003 = new CreateFinding('BLT', 'link target "$href" missing')

/**
 * <b>A01: create finding</b><br>
 * <br>
 * <b>A01/04: BLTRC - link target "$href" missing, reference count: $refCount</b>
 */
const CREATE_FINDING_004 = new CreateFinding('BLTRC', 'link target "$href" missing, reference count: $refCount')

const CREATE_FINDING = [
  CREATE_FINDING_001,
  CREATE_FINDING_002,
  CREATE_FINDING_003,
  CREATE_FINDING_004
]

/**
 * <b>A02: inc number of checks</b><br>
 * <br>
 * <b>A02/01: +1 - one check</b>
 */
const INC_NUMBER_OF_CHECKS_001 = new IncNumberOfChecks('+1', 1)

/**
 * <b>A02: inc number of checks</b><br>
 * <br>
 * <b>A02/02: +2 - two checks</b>
 */
const INC_NUMBER_OF_CHECKS_002 = new IncNumberOfChecks('+2', 2)

const INC_NUMBER_OF_CHECKS = [
  INC_NUMBER_OF_CHECKS_001,
  INC_NUMBER_OF_CHECKS_002
]

module.exports = {

  DecisionTableLogic: IBrokenCrossReferencesChecker,

  HREF_CONTAINS_INVALID_CHARS,
  HREF_CONTAINS_INVALID_CHARS_001,
  HREF_CONTAINS_INVALID_CHARS_002,
  HREF_CONTAINS_INVALID_CHARS_003,

  HREF_STARTS_WITH,
  HREF_STARTS_WITH_001,

  HREF_EQUAL,
  HREF_EQUAL_001,

  COUNT_REFERENCE_OCCURRENCES,
  COUNT_REFERENCE_OCCURRENCES_001,

  CREATE_FINDING,
  CREATE_FINDING_001,
  CREATE_FINDING_002,
  CREATE_FINDING_003,
  CREATE_FINDING_004,

  INC_NUMBER_OF_CHECKS,
  INC_NUMBER_OF_CHECKS_001,
  INC_NUMBER_OF_CHECKS_002
}

// Epilog Standard <----

// End of generated JavaScript source code
// Generated by LF-ET 2.3.0 (240629a), https://www.lohrfink.de/lfet
