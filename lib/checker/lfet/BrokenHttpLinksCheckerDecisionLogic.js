// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.3.0 (240629a), https://www.lohrfink.de/lfet
// From decision table
// "../htmlSanityCheck.js/lfet/checker/BrokenHttpLinksChecker.lfet"
// 03.07.2024 19:51
//

// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.Dt.ini not found
// used LF-ET 2.3.0 (240629a) build in default

// cav = condition and action values
const cav = require('./IBrokenHttpLinksChecker.js')

class BrokenHttpLinksCheckerDecisionLogic {
  constructor (/* LoggingFacade */ logger) {
    this.logger = logger
  }

  execute (/* IBrokenHttpLinksChecker */ iface, model) {
    // Prolog Standard <----

    let ruleGroup = 1
    let exit = false

    while (!exit) {
      exit = true

      if (ruleGroup === 1 /* step 1 - 1 */) {
        if (iface.isIgnoreLocalhostCheck(model)) {
          // Rule R01 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 1 / 16 - ${JSON.stringify(model)}`)

          ruleGroup++
          exit = false

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 1 / 16 - ${JSON.stringify(model)}`)

          // Rule R01 <----
        } else /* ignore localhost check N - No */ {
          if (iface.isCheckIfLocalhost(cav.CHECK_IF_LOCALHOST_LOCALHOST, model) /* localhost - \/\/localhost */) {
            // Rule R02 ---->

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 2 / 16 - ${JSON.stringify(model)}`)

            iface.doCreateFinding(cav.CREATE_FINDING_LOCALHOST, model) // LOCALHOST - Warning: localhost urls indicates suspicious environment dependency: href={href}

            exit = true

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 2 / 16 - ${JSON.stringify(model)}`)

            // Rule R02 <----
          } else if (iface.isCheckIfLocalhost(cav.CHECK_IF_LOCALHOST_12700_X, model) /* 127.0.0.x - \/\/127\.0\.0\.[0-9]* */) {
            // Rule R03 ---->

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 3 / 16 - ${JSON.stringify(model)}`)

            iface.doCreateFinding(cav.CREATE_FINDING_LOCALHOST, model) // LOCALHOST - Warning: localhost urls indicates suspicious environment dependency: href={href}

            exit = true

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 3 / 16 - ${JSON.stringify(model)}`)

            // Rule R03 <----
          } else /* check if localhost * - other */ {
            // Rule R04 ---->

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 4 / 16 - ${JSON.stringify(model)}`)

            ruleGroup++
            exit = false

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 4 / 16 - ${JSON.stringify(model)}`)

            // Rule R04 <----
          }
        }
      } else if (ruleGroup === 2 /* step 2 - 2 */) {
        if (iface.isIgnoreIpAddressCheck(model)) {
          // Rule R05 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 5 / 16 - ${JSON.stringify(model)}`)

          ruleGroup++
          exit = false

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 5 / 16 - ${JSON.stringify(model)}`)

          // Rule R05 <----
        } else /* ignore ip address check N - No */ {
          if (iface.isCheckIfIpAddress(model)) {
            // Rule R06 ---->

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 6 / 16 - ${JSON.stringify(model)}`)

            iface.doCreateFinding(cav.CREATE_FINDING_NUMERIC_IP, model) // NUMERIC_IP - Warning: numerical urls (ip address) indicates suspicious environment dependency: href={href}

            exit = true

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 6 / 16 - ${JSON.stringify(model)}`)

            // Rule R06 <----
          } else /* check if ip address N - No */ {
            // Rule R07 ---->

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 7 / 16 - ${JSON.stringify(model)}`)

            ruleGroup++
            exit = false

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 7 / 16 - ${JSON.stringify(model)}`)

            // Rule R07 <----
          }
        }
      } else if (ruleGroup === 3 /* step 3 - 3 */) {
        // Rule R08 ---->

        this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 8 / 16 - ${JSON.stringify(model)}`)

        iface.doExecuteHttpRequest(cav.EXECUTE_HTTP_REQUEST_HEAD, model) // HEAD - head request

        ruleGroup++
        exit = false

        this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 8 / 16 - ${JSON.stringify(model)}`)

        // Rule R08 <----
      } else if (ruleGroup === 4 /* step 4 - 4 */) {
        if (iface.isCheckHeadHttpStatusCodeInConfiguredSuccessRange_SUCCESS(model)) {
          // Rule R09 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 9 / 16 - ${JSON.stringify(model)}`)

          exit = true

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 9 / 16 - ${JSON.stringify(model)}`)

          // Rule R09 <----
        } else /* check head http status code in configured success range * - * */ {
          if (iface.isCheckHeadHttpStatusCodeInRedirectRange(cav.CHECK_HEAD_HTTP_STATUS_CODE_IN_REDIRECT_RANGE_30_X, model) /* 30x - [301:308] */) {
            if (iface.isCheckIfHeaderContainsLocation(model)) {
              // Rule R10 ---->

              this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 10 / 16 - ${JSON.stringify(model)}`)

              iface.doCreateFinding(cav.CREATE_FINDING_REDIRECT, model) // REDIRECT - Warning: href={href} returned statuscode {statusCode}, new location: {locationHeader}

              exit = true

              this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 10 / 16 - ${JSON.stringify(model)}`)

              // Rule R10 <----
            } else /* check if header contains location N - No */ {
              // Rule R11 ---->

              this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 11 / 16 - ${JSON.stringify(model)}`)

              exit = true

              this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 11 / 16 - ${JSON.stringify(model)}`)

              // Rule R11 <----
            }
          } else /* check head http status code in redirect range * - * */ {
            // Rule R12 ---->

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 12 / 16 - ${JSON.stringify(model)}`)

            iface.doExecuteHttpRequest(cav.EXECUTE_HTTP_REQUEST_GET, model) // GET - get request

            ruleGroup++
            exit = false

            this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 12 / 16 - ${JSON.stringify(model)}`)

            // Rule R12 <----
          }
        }
      } else /* step 5 - 5 */ {
        if (iface.isCheckGetHttpStatusCodeInConfiguredRanges_SUCCESS(model)) {
          // Rule R13 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 13 / 16 - ${JSON.stringify(model)}`)

          exit = true

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 13 / 16 - ${JSON.stringify(model)}`)

          // Rule R13 <----
        } else if (iface.isCheckGetHttpStatusCodeInConfiguredRanges_WARN(model)) {
          // Rule R14 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 14 / 16 - ${JSON.stringify(model)}`)

          iface.doCreateFinding(cav.CREATE_FINDING_WARN, model) // WARN - Warning: href={href} returned statuscode {statusCode}

          exit = true

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 14 / 16 - ${JSON.stringify(model)}`)

          // Rule R14 <----
        } else if (iface.isCheckGetHttpStatusCodeInConfiguredRanges_ERROR(model)) {
          // Rule R15 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 15 / 16 - ${JSON.stringify(model)}`)

          iface.doCreateFinding(cav.CREATE_FINDING_ERROR, model) // ERROR - Error: href={href} returned statuscode {statusCode}

          exit = true

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 15 / 16 - ${JSON.stringify(model)}`)

          // Rule R15 <----
        } else /* check get http status code in configured ranges * - unexpected status */ {
          // Rule R16 ---->

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 16 / 16 - ${JSON.stringify(model)}`)

          iface.doCreateFinding(cav.CREATE_FINDING_UNKNOWN, model) // UNKNOWN - Error: Unknown or unclassified response code: href={href} returned statuscode {statusCode}

          exit = true

          this.logger.trace(`BrokenHttpLinksChecker - 20240703.195150 - 16 / 16 - ${JSON.stringify(model)}`)

          // Rule R16 <----
        }
      }
    }

    // Epilog Standard ---->
    // profile LFET.Java.Epilog.Standard.Interface.Dt.ini not found
    // used LF-ET 2.3.0 (240629a) build in default
  }
}

module.exports = BrokenHttpLinksCheckerDecisionLogic

// Epilog Standard <----

// End of generated JavaScript source code
// Generated by LF-ET 2.3.0 (240629a), https://www.lohrfink.de/lfet
