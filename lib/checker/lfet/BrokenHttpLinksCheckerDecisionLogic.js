// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.3.0 (240306a), https://www.lohrfink.de/lfet
// From decision table
// "../htmlSanityCheck.js/lfet/checker/BrokenHttpLinksChecker.lfet"
// 06.03.2024 23:48
//

// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.Dt.ini not found
// used LF-ET 2.3.0 (240306a) build in default

// cav = condition and action values
const cav = require('./IBrokenHttpLinksChecker.js')

class BrokenHttpLinksCheckerDecisionLogic {
    execute(/* IBrokenHttpLinksChecker */ iface, model) {
// Prolog Standard <----

    let ruleGroup = 1
    let exit = false

    while (!exit) {

        exit = true

            if (ruleGroup === 1 /* step 1 - 1 */) {
                if (iface.isIgnoreLocalhostCheck(model)) {
                    // Rule R01 ---->

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 1 / 12 - ${JSON.stringify(model)}`)

                    ruleGroup++
                    exit = false

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 1 / 12 - ${JSON.stringify(model)}`)

                    // Rule R01 <----
                } else {
                    if (iface.isCheckIfLocalhost(cav.CheckIfLocalhost_LOCALHOST, model) /* localhost - localhost */) {
                        // Rule R02 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 2 / 12 - ${JSON.stringify(model)}`)

                        iface.doCreateFinding(model)

                        ruleGroup++
                        exit = false

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 2 / 12 - ${JSON.stringify(model)}`)

                        // Rule R02 <----
                    } else if (iface.isCheckIfLocalhost(cav.CheckIfLocalhost_12700X, model) /* 127.0.0.x - 127.0.0. */) {
                        // Rule R03 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 3 / 12 - ${JSON.stringify(model)}`)

                        iface.doCreateFinding(model)

                        ruleGroup++
                        exit = false

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 3 / 12 - ${JSON.stringify(model)}`)

                        // Rule R03 <----
                    } else /* check if localhost * - other */ {
                        // Rule R04 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 4 / 12 - ${JSON.stringify(model)}`)

                        ruleGroup++
                        exit = false

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 4 / 12 - ${JSON.stringify(model)}`)

                        // Rule R04 <----
                    }
                }
            } else if (ruleGroup === 2 /* step 2 - 2 */) {
                if (iface.isIgnoreIpAddressCheck(model)) {
                    // Rule R05 ---->

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 5 / 12 - ${JSON.stringify(model)}`)

                    ruleGroup++
                    exit = false

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 5 / 12 - ${JSON.stringify(model)}`)

                    // Rule R05 <----
                } else {
                    if (iface.isCheckIfIpAddress(model)) {
                        // Rule R06 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 6 / 12 - ${JSON.stringify(model)}`)

                        ruleGroup++
                        exit = false

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 6 / 12 - ${JSON.stringify(model)}`)

                        // Rule R06 <----
                    } else {
                        // Rule R07 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 7 / 12 - ${JSON.stringify(model)}`)

                        ruleGroup++
                        exit = false

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 7 / 12 - ${JSON.stringify(model)}`)

                        // Rule R07 <----
                    }
                }
            } else if (ruleGroup === 3 /* step 3 - 3 */) {
                // Rule R08 ---->

                console.log(`BrokenHttpLinksChecker - 20240306.234835 - 8 / 12 - ${JSON.stringify(model)}`)

                iface.doExecuteHttpRequest(cav.ExecuteHttpRequest_HEAD, model) // HEAD - head request

                ruleGroup++
                exit = false

                console.log(`BrokenHttpLinksChecker - 20240306.234835 - 8 / 12 - ${JSON.stringify(model)}`)

                // Rule R08 <----
            } else /* step 4 - 4 */ {
                if (iface.isCheckHttpStatusCode(cav.CheckHttpStatusCode_20X, model) /* 20x - [200:300[ */) {
                    // Rule R09 ---->

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 9 / 12 - ${JSON.stringify(model)}`)

                    exit = true

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 9 / 12 - ${JSON.stringify(model)}`)

                    // Rule R09 <----
                } else if (iface.isCheckHttpStatusCode(cav.CheckHttpStatusCode_30X, model) /* 30x - [301:308] */) {
                    if (iface.isCheckIfHeaderContainsLocation(model)) {
                        // Rule R10 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 10 / 12 - ${JSON.stringify(model)}`)

                        iface.doCreateFinding(model)

                        exit = true

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 10 / 12 - ${JSON.stringify(model)}`)

                        // Rule R10 <----
                    } else {
                        // Rule R11 ---->

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 11 / 12 - ${JSON.stringify(model)}`)

                        exit = true

                        console.log(`BrokenHttpLinksChecker - 20240306.234835 - 11 / 12 - ${JSON.stringify(model)}`)

                        // Rule R11 <----
                    }
                } else /* check http status code * -  */ {
                    // Rule R12 ---->

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 12 / 12 - ${JSON.stringify(model)}`)

                    exit = true

                    console.log(`BrokenHttpLinksChecker - 20240306.234835 - 12 / 12 - ${JSON.stringify(model)}`)

                    // Rule R12 <----
                }
            }

        }

        // Epilog Standard ---->
        // profile LFET.Java.Epilog.Standard.Interface.Dt.ini not found
        // used LF-ET 2.3.0 (240306a) build in default

    }

}

module.exports = BrokenHttpLinksCheckerDecisionLogic

// Epilog Standard <----

// End of generated JavaScript source code
// Generated by LF-ET 2.3.0 (240306a), https://www.lohrfink.de/lfet
