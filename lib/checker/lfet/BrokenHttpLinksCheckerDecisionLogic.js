// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.3.0 (240312a), https://www.lohrfink.de/lfet
// From decision table
// "../htmlSanityCheck.js/lfet/checker/BrokenHttpLinksChecker.lfet"
// 13.03.2024 07:50
//

// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.Dt.ini not found
// used LF-ET 2.3.0 (240312a) build in default

// cav = condition and action values
const cav = require('./IBrokenHttpLinksChecker.js')

class BrokenHttpLinksCheckerDecisionLogic {
    execute(/* IBrokenHttpLinksChecker */ iface, model) {
// Prolog Standard <----

    let ruleGroup = 1
    let exit = false

    while (!exit) {

        exit = true

            if (ruleGroup === 1 /* step 1 - 1 */) {
                if (iface.isIgnoreLocalhostCheck(model)) {
                    // Rule R01 ---->

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 1 / 16 - ${JSON.stringify(model)}`)

                    ruleGroup++
                    exit = false

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 1 / 16 - ${JSON.stringify(model)}`)

                    // Rule R01 <----
                } else /* ignore localhost check N - No */ {
                    if (iface.isCheckIfLocalhost(cav.CheckIfLocalhost_LOCALHOST, model) /* localhost - \/\/localhost */) {
                        // Rule R02 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 2 / 16 - ${JSON.stringify(model)}`)

                        iface.doCreateFinding_LOCALHOST(model)

                        ruleGroup++
                        exit = false

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 2 / 16 - ${JSON.stringify(model)}`)

                        // Rule R02 <----
                    } else if (iface.isCheckIfLocalhost(cav.CheckIfLocalhost_12700X, model) /* 127.0.0.x - \/\/127\.0\.0\.[0-9]* */) {
                        // Rule R03 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 3 / 16 - ${JSON.stringify(model)}`)

                        iface.doCreateFinding_LOCALHOST(model)

                        ruleGroup++
                        exit = false

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 3 / 16 - ${JSON.stringify(model)}`)

                        // Rule R03 <----
                    } else /* check if localhost * - other */ {
                        // Rule R04 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 4 / 16 - ${JSON.stringify(model)}`)

                        ruleGroup++
                        exit = false

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 4 / 16 - ${JSON.stringify(model)}`)

                        // Rule R04 <----
                    }
                }
            } else if (ruleGroup === 2 /* step 2 - 2 */) {
                if (iface.isIgnoreIpAddressCheck(model)) {
                    // Rule R05 ---->

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 5 / 16 - ${JSON.stringify(model)}`)

                    ruleGroup++
                    exit = false

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 5 / 16 - ${JSON.stringify(model)}`)

                    // Rule R05 <----
                } else /* ignore ip address check N - No */ {
                    if (iface.isCheckIfIpAddress(model)) {
                        // Rule R06 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 6 / 16 - ${JSON.stringify(model)}`)

                        iface.doCreateFinding_NUMERIC_IP(model)

                        ruleGroup++
                        exit = false

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 6 / 16 - ${JSON.stringify(model)}`)

                        // Rule R06 <----
                    } else /* check if ip address N - No */ {
                        // Rule R07 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 7 / 16 - ${JSON.stringify(model)}`)

                        ruleGroup++
                        exit = false

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 7 / 16 - ${JSON.stringify(model)}`)

                        // Rule R07 <----
                    }
                }
            } else if (ruleGroup === 3 /* step 3 - 3 */) {
                // Rule R08 ---->

                model.log(`BrokenHttpLinksChecker - 20240313.075011 - 8 / 16 - ${JSON.stringify(model)}`)

                iface.doExecuteHttpRequest(cav.ExecuteHttpRequest_HEAD, model) // HEAD - head request

                ruleGroup++
                exit = false

                model.log(`BrokenHttpLinksChecker - 20240313.075011 - 8 / 16 - ${JSON.stringify(model)}`)

                // Rule R08 <----
            } else if (ruleGroup === 4 /* step 4 - 4 */) {
                if (iface.isCheckHttpStatusCodeInConfiguredSuccessRange_SUCCESS(model)) {
                    // Rule R09 ---->

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 9 / 16 - ${JSON.stringify(model)}`)

                    exit = true

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 9 / 16 - ${JSON.stringify(model)}`)

                    // Rule R09 <----
                } else /* check http status code in configured success range * - * */ {
                    if (iface.isCheckHttpStatusCodeInRedirectRange_30X(model)) {
                        if (iface.isCheckIfHeaderContainsLocation(model)) {
                            // Rule R10 ---->

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 10 / 16 - ${JSON.stringify(model)}`)

                            iface.doCreateFinding_REDIRECT(model)

                            exit = true

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 10 / 16 - ${JSON.stringify(model)}`)

                            // Rule R10 <----
                        } else /* check if header contains location N - No */ {
                            // Rule R11 ---->

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 11 / 16 - ${JSON.stringify(model)}`)

                            exit = true

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 11 / 16 - ${JSON.stringify(model)}`)

                            // Rule R11 <----
                        }
                    } else /* check http status code in redirect range * - * */ {
                        // Rule R12 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 12 / 16 - ${JSON.stringify(model)}`)

                        iface.doExecuteHttpRequest(cav.ExecuteHttpRequest_GET, model) // GET - get request

                        ruleGroup++
                        exit = false

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 12 / 16 - ${JSON.stringify(model)}`)

                        // Rule R12 <----
                    }
                }
            } else /* step 5 - 5 */ {
                if (iface.isCheckHttpStatusCodeInConfiguredSuccessRange_SUCCESS(model)) {
                    // Rule R13 ---->

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 13 / 16 - ${JSON.stringify(model)}`)

                    exit = true

                    model.log(`BrokenHttpLinksChecker - 20240313.075011 - 13 / 16 - ${JSON.stringify(model)}`)

                    // Rule R13 <----
                } else /* check http status code in configured success range * - * */ {
                    if (iface.isCheckHttpStatusCodeInConfiguredWarningRange_WARN(model)) {
                        // Rule R14 ---->

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 14 / 16 - ${JSON.stringify(model)}`)

                        exit = true

                        model.log(`BrokenHttpLinksChecker - 20240313.075011 - 14 / 16 - ${JSON.stringify(model)}`)

                        // Rule R14 <----
                    } else /* check http status code in configured warning range * - * */ {
                        if (iface.isCheckHttpStatusCodeInConfiguredErrorRange_ERROR(model)) {
                            // Rule R15 ---->

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 15 / 16 - ${JSON.stringify(model)}`)

                            exit = true

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 15 / 16 - ${JSON.stringify(model)}`)

                            // Rule R15 <----
                        } else /* check http status code in configured error range * - * */ {
                            // Rule R16 ---->

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 16 / 16 - ${JSON.stringify(model)}`)

                            exit = true

                            model.log(`BrokenHttpLinksChecker - 20240313.075011 - 16 / 16 - ${JSON.stringify(model)}`)

                            // Rule R16 <----
                        }
                    }
                }
            }

        }

        // Epilog Standard ---->
        // profile LFET.Java.Epilog.Standard.Interface.Dt.ini not found
        // used LF-ET 2.3.0 (240312a) build in default

    }

}

module.exports = BrokenHttpLinksCheckerDecisionLogic

// Epilog Standard <----

// End of generated JavaScript source code
// Generated by LF-ET 2.3.0 (240312a), https://www.lohrfink.de/lfet
